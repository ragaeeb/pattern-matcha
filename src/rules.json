[
    {
        "id": -2,
        "name": "removeZeroWidthJoiners",
        "pattern": "[\\u200B\\u200C\\u200D\\u00AD\\uFEFF\\u2060]",
        "replacement": " ",
        "flags": "g",
        "description": "For plain-text Arabic content, removing Zero-Width Joiners (ZWJ) and other zero-width characters might still have some implications, but they would typically be less severe compared to rich text or text with mixed languages and complex scripts. Here are a few considerations:\n\n1. Ligature Formation:\nIn Arabic scripts, the Zero Width Joiner (U+200D) can be used to control ligature formation. While this is more relevant in rich text with specific formatting requirements, even in plain text, removing ZWJ can lead to changes in ligature formation and potentially affect the visual presentation of the text.\n\n2. Word Breaking:\nZero Width Space (U+200B) can be used to indicate permissible breakpoints within Arabic words. Removing it can affect word breaking and wrapping in user interfaces displaying the plain text.\n\n3. Bi-Directional Text:\nIf your plain-text Arabic content has embedded Latin scripts or numbers, removing certain control characters may still affect the presentation due to changes in bi-directional rendering rules.\n\n4. Special Cases:\nIn some specialized contexts or for specific use cases, zero-width characters might be used for unique formatting or encoding purposes in plain-text Arabic content, and removing them could impact those cases.\n\nConsideration:\nWhile removing zero-width characters can help in streamlining text processing and analysis tasks, it’s crucial to consider the context in which the text will be used and to review whether these characters serve a functional purpose in that context. If the text is purely for analysis, and the visual representation is not a concern, removing these characters might not cause significant issues. However, if the text is intended for display, especially in UI components, you might want to test thoroughly to ensure that removing these characters does not adversely affect the text's readability and appearance.",
        "arabic": 1,
        "onPaste": 1,
        "timestamp": "2023-09-28 13:52:34",
        "last_updated": "2023-09-28 13:54:14"
    },
    {
        "id": -1,
        "name": "foolSmartQuotes",
        "pattern": "[“”]",
        "replacement": "\"",
        "flags": "g",
        "description": "replaces smart quotes with the regular ones",
        "english": 1,
        "onPaste": 1,
        "timestamp": "2023-09-25 19:08:51",
        "last_updated": "2023-09-27 06:08:54"
    },
    {
        "id": 1,
        "pattern": "\"([^\"]*)\"",
        "name": "applySmartQuotes",
        "replacement": "“$1”",
        "flags": "g",
        "description": "Turns regular double quotes surrounding a body of text into fancy smart quotes.",
        "english": 1,
        "onBlur": 1,
        "timestamp": "2023-09-25 19:08:51",
        "last_updated": "2023-09-27 06:05:13"
    },
    {
        "id": 2,
        "pattern": "^”",
        "name": "applySmartQuotes2",
        "replacement": "“",
        "flags": "g",
        "description": "It looks for the character `”` (a closing double quotation mark) at the beginning of a string.\n\nIf found, it replaces it with the character `“` (an opening double quotation mark).\n\nThis rule ensures that if a string starts with a closing quotation mark (which is typically an error or oversight), it gets corrected to start with an opening quotation mark. \n\nThe `^` in the regex pattern signifies the beginning of a string. The rule only matches if the closing quotation mark is the very first character in the string.",
        "english": 1,
        "onBlur": 1,
        "timestamp": "2023-09-25 19:08:51",
        "last_updated": "2023-09-27 06:05:13"
    },
    {
        "id": 3,
        "name": "cleanSpacesBeforePeriod",
        "pattern": "\\s+([.؟!,،؛:?])",
        "replacement": "$1",
        "flags": "g",
        "description": "Cleans unnecessary spaces before punctuation from text.",
        "arabic": 1,
        "english": 1,
        "onBlur": 1,
        "timestamp": "2023-09-25 19:08:51",
        "last_updated": "2023-09-28 13:43:19"
    },
    {
        "id": 4,
        "name": "reduceSpaceBetweenReference",
        "pattern": "(\\d+)\\s?/\\s?(\\d+)",
        "replacement": "$1/$2",
        "flags": "g",
        "description": "Turns \"127 / 11\" to \"127/11\"",
        "arabic": 1,
        "english": 1,
        "onBlur": 1,
        "timestamp": "2023-09-25 19:08:51",
        "last_updated": "2023-09-27 21:50:21"
    },
    {
        "id": 7,
        "pattern": "\\(peace be upon him\\)|(Messenger of (Allah|Allāh)|Messenger|Prophet|Mu[hḥ]ammad) *\\(s[^)]*m\\)*",
        "replacement": "$1 ﷺ",
        "flags": "gi",
        "description": "Anything with \"peace Muhammad s....m\" replaces with the salutation",
        "english": 1,
        "onBlur": 1,
        "name": "fixSalutations",
        "timestamp": "2023-09-25 19:08:51",
        "last_updated": "2023-09-27 06:05:13"
    },
    {
        "id": 8,
        "pattern": ",\\s*ﷺ\\s*,",
        "replacement": " ﷺ",
        "flags": "g",
        "name": "fixSalutations2",
        "description": "Replaces texts that have comma between the salutation with just the salutation.",
        "english": 1,
        "onBlur": 1,
        "timestamp": "2023-09-25 19:08:51",
        "last_updated": "2023-09-27 06:05:13"
    },
    {
        "id": 9,
        "pattern": "ʿʿ",
        "replacement": "ʿ",
        "flags": "g",
        "description": "Corrects ʿ that is part of the target from having ʿ twice",
        "english": 1,
        "name": "doubleAyn2Single",
        "onBlur": 1,
        "timestamp": "2023-09-25 19:08:51",
        "last_updated": "2023-09-27 06:05:13"
    },
    {
        "id": 10,
        "pattern": "ʾʾ",
        "replacement": "ʾ",
        "flags": "g",
        "name": "doubleHamza2Single",
        "description": "Corrects words like ʿulamāʾʾ to ʿulamāʾ",
        "english": 1,
        "onBlur": 1,
        "timestamp": "2023-09-25 19:08:51",
        "last_updated": "2023-09-27 06:05:13"
    },
    {
        "id": 11,
        "name": "al-prefix",
        "pattern": "(\\b|\\W)(Al |Al-|Ar-|As-|Adh-|Ath |Ath-|Az |Az-|az-|adh-|as-|ar-)",
        "replacement": "$1al-",
        "flags": "g",
        "description": "should replace all the al-s in strings like Al-Rahman bar-Rahman becomes al-Rahman to al-Rahman bar-Rahman becomes al-Rahman",
        "english": 1,
        "onBlur": 1,
        "timestamp": "2023-09-25 19:08:51",
        "last_updated": "2023-12-09 12:41:19"
    },
    {
        "id": 12,
        "name": "al-prefix",
        "pattern": "(\\b|\\W)(Ash-S|ash-S)",
        "replacement": "$1al-S",
        "flags": "g",
        "description": "should replace all the ash in strings like ash-Shafiee but not when the 2nd word does not start with a S",
        "english": 1,
        "onBlur": 1,
        "timestamp": "2023-12-09 01:03:19",
        "last_updated": "2023-12-09 01:03:19"
    },
    {
        "id": 14,
        "name": "al-trim",
        "pattern": "al- (.+?)\\b",
        "replacement": "al-$1",
        "flags": "g",
        "description": "Removes the space between a trailing al- and the next word.\n\nconsole.log(replaceAl(\"Al-Rahman bar-Rahman ar-Rahman al- Rahman al- ḥadīth bal- Rahman\"));  \n// Output should be \"al-Rahman bar-Rahman al-Rahman al-Rahman al-ḥadīth bal- Rahman\"\n\nWill Match\nal- ḥadīth => al-ḥadīth\nal- Rahman => al-Rahman\nal- Qāḍī => al-Qāḍī\nal- ʿAbd => al-ʿAbd\nal- Jabbār => al-Jabbār\nal- something => al-something\n\nWill Not Match\nAl- Rahman (Capital \"A\" in \"Al-\")\nal-Rahman (Already connected)\nbal- Rahman (There is a character before \"al-\")\nal -Rahman (Space before and after dash)\nal-3Rahman (Starts with a number)\nal- (Nothing following \"al-\")",
        "english": 1,
        "onBlur": 1,
        "timestamp": "2023-10-03 05:47:42",
        "last_updated": "2023-10-03 05:59:19"
    },
    {
        "id": 16,
        "name": "cleanExtremeArabicUnderscores",
        "pattern": "(?<!\\d ?ه)ـ(?=\\r?$)|^ـ",
        "replacement": "",
        "flags": "gm",
        "description": "Gets rid of the ـ character at the end of Arabic strings\nIf the text is \"some textـ\", it will be replaced to \"some text\".\n\nInput:  \"ـThis is a textـ\"\nOutput: \"This is a text\"\n\nInput:  \"ـAnother example with 1422هـ\"\nOutput: \"Another example with 1422هـ\"\n\nInput:  \"ـA multiline stringـ\\nـwith several linesـ\\n1423هـ\"\nOutput: \"A multiline string\\nwith several lines\\n1423هـ\"\n\nInput:  \"This is a normal line\\nـAnd this one starts with the characterـ\\nAnd 1424هـ remains unchanged\"\nOutput: \"This is a normal line\\nAnd this one starts with the character\\nAnd 1424هـ remains unchanged\"\n\nInput:  \"ـJustـ anotherـ exampleـ\\n1425هـ is a Hijri yearـ\"\nOutput: \"Just another example\\n1425هـ is a Hijri year\"",
        "arabic": 1,
        "onPaste": 1,
        "timestamp": "2023-09-25 19:08:51",
        "last_updated": "2023-09-27 16:06:57"
    },
    {
        "id": 18,
        "pattern": "‛|’|‘",
        "replacement": "'",
        "flags": "g",
        "description": "Turns all apostrophe variations to the actual apostrophe character to simplify word substitutions.",
        "english": 1,
        "onPaste": 1,
        "timestamp": "2023-09-25 19:08:51",
        "last_updated": "2023-09-27 06:05:13"
    },
    {
        "id": 20,
        "pattern": "\\s+,",
        "replacement": ",",
        "flags": "g",
        "description": "Removes spaces before a comma (ie: \"this , then that\" to \"this, then that\")",
        "english": 1,
        "onBlur": 1,
        "timestamp": "2023-09-25 19:08:51",
        "last_updated": "2023-09-27 06:05:13"
    },
    {
        "id": 22,
        "name": "removeSpaceInsideQuotedText",
        "pattern": "([“”\"]|«) *(.*?) *([“”\"]|»)",
        "replacement": "$1$2$3",
        "flags": "g",
        "description": "turns: “ Fasting is during the winter. ” into “Fasting is during the winter.”",
        "english": 1,
        "onBlur": 1,
        "onPaste": 1,
        "timestamp": "2023-09-25 19:08:51",
        "last_updated": "2023-09-27 21:46:04"
    },
    {
        "id": 24,
        "pattern": "([\\[\\(])\\s*(.*?)\\s*([\\]\\)])",
        "replacement": "$1$2$3",
        "flags": "g",
        "description": "Removes unnecessary spaces between the edges of brackets. For example turns ( a b c d ) to (a b c d) and [ e f ] to [ef].",
        "arabic": 1,
        "english": 1,
        "onBlur": 1,
        "onPaste": 1,
        "timestamp": "2023-09-25 19:08:51",
        "last_updated": "2023-09-27 06:05:13"
    },
    {
        "id": 26,
        "pattern": "\\?|؟\\.",
        "replacement": "؟",
        "flags": "g",
        "description": "Replaces English question mark to Arabic one or an Arabic question mark with a period to just the question mark.",
        "arabic": 1,
        "onPaste": 1,
        "timestamp": "2023-09-25 19:08:51",
        "last_updated": "2023-09-27 06:05:13"
    },
    {
        "id": 28,
        "pattern": "(;|؛)\\s*(\\1\\s*)*",
        "replacement": "؛",
        "flags": "g",
        "description": "Replaces English semicolon with Arabic one.\n\nIt also replaces multiple consecutive occurrences of semicolons (;) or Arabic semicolons (؛)—along with any intervening whitespace—with a single Arabic semicolon.",
        "arabic": 1,
        "onPaste": 1,
        "timestamp": "2023-09-25 19:08:51",
        "last_updated": "2023-09-27 06:05:13"
    },
    {
        "id": 30,
        "name": "englishToArabicComma",
        "pattern": ",|-،",
        "replacement": "،",
        "flags": "g",
        "description": "Replaces English comma with Arabic one.",
        "arabic": 1,
        "onPaste": 1,
        "timestamp": "2023-09-25 19:08:51",
        "last_updated": "2023-09-28 16:38:15"
    },
    {
        "id": 40,
        "name": "addSpaceAfterPunctuation",
        "pattern": "( ?)([.!?,،؟;؛])((?![ '”“\\)\"\\]\\n])|(?=\\s{2,}))",
        "replacement": "$1$2 ",
        "flags": "g",
        "description": "Adds space before punctuation.",
        "arabic": 1,
        "english": 1,
        "onBlur": 1,
        "timestamp": "2023-09-25 19:08:51",
        "last_updated": "2023-09-28 18:00:52"
    },
    {
        "id": 41,
        "name": "addSpaceAfterPunctuation",
        "pattern": "\\s([.!?,،؟;؛])\\s*([ '”“\\)\"\\]\\n])",
        "replacement": "$1$2",
        "flags": "g",
        "description": "1) \"This is the first line .\nThis is the second line.\"\nTo turn to: \"This is the first line.\nThis is the second line.\"\n\nSo it should not replace the line breaks, only the spaces.\n\n2) \"“I have the book !” 'I have it . '\" should turn to \"“I have the book!” 'I have it.'\"\nNotice that we don't want add the extra space in between the punctuation and the apostrophe or quotation mark.\n\n\"A string like this .Should turn into that ! But what about  ?   This one ; However ...it goes without saying.\"\n\nShould turn into:\n\"A string like this. Should turn into that! But what about? This one; However...it goes without saying.\"\n\nShould not add spaces for brackets and quoted text like:\n“This is some text!” [Something!] (Something!)",
        "arabic": 1,
        "english": 1,
        "onBlur": 1,
        "timestamp": "2023-09-25 19:08:51",
        "last_updated": "2023-09-28 18:00:54"
    },
    {
        "id": 43,
        "name": "addSpaceAfterPunctuation",
        "pattern": "([^\\s\\w\\d'”“\\)\"\\]]+)\\s+([.!?,،؟;؛])|([.!?,،؟;؛])\\s+$",
        "replacement": "$1$2$3",
        "flags": "g",
        "description": "Adds space before the functuation.",
        "arabic": 1,
        "english": 1,
        "onBlur": 1,
        "timestamp": "2023-09-25 19:08:51",
        "last_updated": "2023-09-28 18:00:55"
    },
    {
        "id": 45,
        "name": "insertSpaceBetweenArabicTextAndNumber",
        "pattern": "([\\u0600-\\u06FF]+)(\\d+)",
        "replacement": "$1 $2",
        "flags": "g",
        "description": "Adds a space in between Arabic text and a number.\nالآية37\nshould become الآية 37\n\nقال29\nshould become قال 29.",
        "arabic": 1,
        "onPaste": 1,
        "timestamp": "2023-09-28 12:44:53",
        "last_updated": "2023-09-28 13:20:35"
    },
    {
        "id": 50,
        "name": "fixTrailingWow",
        "pattern": " و ",
        "replacement": " و",
        "flags": "g",
        "description": "Fixes \"عليكم و رحمة\" to \"عليكم ورحمة\". This can be improved since it won't work for beginning of sentences, etc,\n * but for now it's a best effort.\n\nit('should fix trailing wow', () => {\n    const { formatted, cleaned } = deepClean('السلام عليكم و رحمة الله وبركاته الطرخون او ورق و');",
        "arabic": 1,
        "onPaste": 1,
        "timestamp": "2023-09-25 19:08:51",
        "last_updated": "2023-09-28 17:50:06"
    },
    {
        "id": 55,
        "name": "condenseColons",
        "pattern": "[\\.-]?:[\\.-]?",
        "replacement": ":",
        "flags": "g",
        "description": "replaces occurrences of .:. with :, as well as .: and :. with :",
        "arabic": 1,
        "onPaste": 1,
        "timestamp": "2023-09-25 19:08:51",
        "last_updated": "2023-09-28 17:49:51"
    },
    {
        "id": 60,
        "name": "addSpaceAfterColon",
        "pattern": "(?<=\\D)( ?: ?)(?!(\\d+:)|(:\\d+))|(?<=\\d) ?: ?(?=\\D)|(?<=\\D) ?: ?(?=\\d)",
        "replacement": ": ",
        "flags": "g",
        "description": "console.log(addSpaceAfterColon(\"a:ksjdf\"));  // \"a: ksjdf\"\nconsole.log(addSpaceAfterColon(\"61:23\"));    // \"61:23\"\nconsole.log(addSpaceAfterColon(\"1:2\"));      // \"1:2\"\nconsole.log(addSpaceAfterColon(\"2:asdf\"));   // \"2: asdf\"\nconsole.log(addSpaceAfterColon(\"a:2 of them\")); // \"a: 2 of them\"\nconsole.log(addSpaceAfterColon(\"(al-Nūr:27\")); // \"(al-Nūr: 27\"\nconsole.log(addSpaceAfterColon(\"(al-Nūr: 27)\")); // \"(al-Nūr: 27)\"",
        "arabic": 1,
        "english": 1,
        "onBlur": 1,
        "timestamp": "2023-09-25 19:08:51",
        "last_updated": "2023-09-28 18:01:43"
    },
    {
        "id": 61,
        "name": "addSpaceAfterColon",
        "pattern": "(?<=\\p{Script=Arabic}) :",
        "replacement": ": ",
        "flags": "gu",
        "description": "console.log(addSpaceAfterColon(\"قال : ومشايخنا\")); // \"قال: ومشايخنا\"\nconsole.log(addSpaceAfterColon(\"[النور: 36]\")); // \"[النور: 36]\"",
        "arabic": 1,
        "english": 1,
        "onBlur": 1,
        "timestamp": "2023-09-25 19:08:51",
        "last_updated": "2023-09-28 18:01:51"
    },
    {
        "id": 70,
        "name": "removeUrls",
        "pattern": "https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_+.~#?&//=]*)",
        "replacement": "",
        "flags": "g",
        "description": "removeUrls",
        "arabic": 1,
        "english": 1,
        "onSanitize": 1,
        "timestamp": "2023-09-25 19:08:51",
        "last_updated": "2023-09-28 18:01:59"
    },
    {
        "id": 75,
        "name": "cleanLiteralNewLines",
        "pattern": "\\\\n|\\r",
        "replacement": "\n",
        "flags": "g",
        "description": "Replaces the literal new line character or the carriage return with a line break.",
        "arabic": 1,
        "onPaste": 1,
        "timestamp": "2023-09-25 19:08:51",
        "last_updated": "2023-09-28 17:49:40"
    },
    {
        "id": 80,
        "name": "removeEnglishLettersAndSymbols",
        "pattern": "[a-zA-Z]+[0-9]*|[¬§`ﷺ=]|\\/{2,}|&",
        "replacement": " ",
        "flags": "g",
        "description": "removeSymbolsFromMatn",
        "arabic": 1,
        "onPaste": 1,
        "timestamp": "2023-09-25 19:08:51",
        "last_updated": "2023-09-28 17:36:14"
    },
    {
        "id": 90,
        "name": "condenseUnderscores",
        "pattern": "ـ{2,}",
        "replacement": "ـ",
        "flags": "g",
        "description": "condenseUnderscores1",
        "arabic": 1,
        "onPaste": 1,
        "timestamp": "2023-09-25 19:08:51",
        "last_updated": "2023-09-28 18:01:02"
    },
    {
        "id": 91,
        "name": "condenseUnderscores",
        "pattern": "_+",
        "replacement": "_",
        "flags": "g",
        "description": "condenseUnderscores2",
        "arabic": 1,
        "onPaste": 1,
        "timestamp": "2023-09-25 19:08:51",
        "last_updated": "2023-09-28 18:01:04"
    },
    {
        "id": 95,
        "name": "condenseDashes",
        "pattern": "-{2,}",
        "replacement": "-",
        "flags": "g",
        "description": "condense two or more dashes/hyphens into a single hyphen.",
        "arabic": 1,
        "english": 1,
        "onPaste": 1,
        "timestamp": "2023-09-25 19:08:51",
        "last_updated": "2023-09-28 18:02:25"
    },
    {
        "id": 101,
        "name": "condenseAsterisks",
        "pattern": "(\\*\\s*)+",
        "replacement": "*",
        "flags": "g",
        "description": "Turns one or more asterisks in a row to a single one.",
        "arabic": 1,
        "english": 1,
        "onPaste": 1,
        "timestamp": "2023-09-25 19:08:51",
        "last_updated": "2023-09-28 17:18:15"
    },
    {
        "id": 105,
        "name": "doubleToSingleBrackets",
        "pattern": "(\\(|\\)){2,}|(\\[|\\]){2,}",
        "replacement": "$1$2",
        "flags": "g",
        "description": "Replaces texts that have two opening & closing brackets and replace sit with a single one.",
        "arabic": 1,
        "english": 1,
        "onPaste": 1,
        "timestamp": "2023-09-28 12:30:53",
        "last_updated": "2023-09-28 17:22:27"
    },
    {
        "id": 111,
        "name": "condensePeriods",
        "pattern": "\\. +\\.",
        "replacement": ".",
        "flags": "g",
        "description": "replace occurrences of a period followed by one or more spaces and\nanother period (\". . . . . . . .\") with a single period.",
        "arabic": 1,
        "english": 1,
        "onPaste": 1,
        "timestamp": "2023-09-25 19:08:51",
        "last_updated": "2023-09-28 17:51:01"
    },
    {
        "id": 121,
        "name": "cleanTrailingPageNumbers",
        "pattern": "-\\[\\d+\\]-",
        "replacement": "",
        "flags": "g",
        "description": "removes -[46]-",
        "arabic": 1,
        "onPaste": 1,
        "timestamp": "2023-09-25 19:08:51",
        "last_updated": "2023-09-28 17:50:52"
    },
    {
        "id": 131,
        "name": "condenseEllipsis",
        "pattern": "\\.{2,}",
        "replacement": "…",
        "flags": "g",
        "description": "replaces sequences of three or more dots with the ellipsis character (…).\n\nthe sequence of ten dots (\"..........\") will be replaced by a single ellipsis character (…). The g flag ensures global replacement, and the {2,} quantifier will match two or more dots greedily, meaning it will try to match as many dots as possible. Therefore, all ten dots would be replaced by just one ellipsis character.",
        "arabic": 1,
        "onPaste": 1,
        "timestamp": "2023-09-25 19:08:51",
        "last_updated": "2023-09-28 17:50:42"
    },
    {
        "id": 171,
        "name": "condenseMultilines",
        "pattern": "(\\n\\s*){3,}",
        "replacement": "\n\n",
        "flags": "g",
        "description": "Turns text when pasted from \"a\\n\\n\\nb\" to \"a\\n\\nb\"\n\nSep 27th, 2023: Decided to keep 2 newlines instead of turning them into 1 for readability.",
        "arabic": 1,
        "onPaste": 1,
        "timestamp": "2023-09-25 19:08:51",
        "last_updated": "2023-10-12 14:05:16"
    },
    {
        "id": 172,
        "name": "condenseMultilines2",
        "pattern": "(\\n\\s*){2,}",
        "replacement": "\n",
        "flags": "g",
        "description": "Replaces multiple line breaks with a single one",
        "english": 1,
        "onPaste": 1,
        "timestamp": "2023-10-12 14:03:08",
        "last_updated": "2023-10-12 14:11:37"
    },
    {
        "id": 181,
        "name": "lineBreaksToSpaces",
        "pattern": "\\s+",
        "replacement": " ",
        "flags": "g",
        "description": "replaces one or more consecutive line breaks (either carriage returns \\r or newlines \\n) with a single space.\nreplaces two or more consecutive whitespace characters (which include spaces, tabs, line breaks, etc.) with a single space.",
        "arabic": 1,
        "onSanitize": 1,
        "timestamp": "2023-09-25 19:08:51",
        "last_updated": "2023-09-28 18:02:37"
    },
    {
        "id": 191,
        "name": "removeSingularCodes",
        "pattern": "[\\[\\({][\\u0621-\\u064A\\u0660-\\u0669][\\]\\)}]",
        "replacement": "",
        "flags": "g",
        "description": "The function removeSingularCodes aims to remove characters that are enclosed in square brackets [] or parentheses () and are within the range of Arabic letters (\\u0621-\\u064A) or Arabic-Indic numerals (\\u0660-\\u0669).\nshould remove [س] and (س)",
        "arabic": 1,
        "onSanitize": 1,
        "timestamp": "2023-09-25 19:08:51",
        "last_updated": "2023-09-28 18:01:24"
    },
    {
        "id": 221,
        "name": "simplifyAlif",
        "pattern": "[أإآ]",
        "replacement": "ا",
        "flags": "g",
        "description": "This replaces all forms of \"alif\" that are not the simple 'ا' with the simple 'ا'.\nExample:\nInput: أنا إلى الآفاق\nOutput: انا الى الافاق",
        "arabic": 1,
        "onSanitize": 1,
        "timestamp": "2023-09-25 19:08:51",
        "last_updated": "2023-09-28 18:03:55"
    },
    {
        "id": 222,
        "name": "replaceAlifMaqsurah",
        "pattern": "[ىي]",
        "replacement": "ي",
        "flags": "g",
        "description": "This replaces the Arabic letter 'alif maqsurah' (ى) with the regular 'ya' (ي).\nExample:\nInput: رؤيى\nOutput: رؤيي",
        "arabic": 1,
        "onSanitize": 1,
        "timestamp": "2023-09-25 19:08:51",
        "last_updated": "2023-09-28 18:03:42"
    },
    {
        "id": 223,
        "name": "removeTaMarbutah",
        "pattern": "[ة]",
        "replacement": "ه",
        "flags": "g",
        "description": "This replaces the 'tah marbutah' (ة) with the regular 'ha' (ه).\nExample:\nInput: مدرسة\nOutput: مدرسه",
        "arabic": 1,
        "onSanitize": 1,
        "timestamp": "2023-09-25 19:08:51",
        "last_updated": "2023-09-28 18:03:25"
    },
    {
        "id": 224,
        "name": "removeTashkeel",
        "pattern": "[\\u0610\\u0611\\u0612\\u0613\\u0614\\u0615\\u0616\\u0617\\u0618\\u0619\\u061A\\u064B\\u064C\\u064D\\u064E\\u064F\\u0650\\u0651\\u0652\\u0653\\u0654\\u0655\\u0656\\u0657\\u0658\\u065A\\u065B\\u065C\\u065D\\u065E\\u0640]",
        "replacement": "",
        "flags": "g",
        "description": "This replaces various Arabic diacritics (tashkeel) and the tatweel (elongation character).\nExample:\nInput: مُحَمَّدٌ\nOutput: محمد\n\nsanitize('أبـــتِـــكَةُ'); // returns 'ابتكه'\n",
        "arabic": 1,
        "onSanitize": 1,
        "timestamp": "2023-09-25 19:08:51",
        "last_updated": "2023-09-28 18:03:12"
    },
    {
        "id": 243,
        "name": "removeNonIndexSignatures",
        "pattern": "(?<![0-9] ?)-|(?<=[\\u0600-\\u06FF])\\s?\\d\\s?(?=[\\u0600-\\u06FF])",
        "replacement": " ",
        "flags": "g",
        "description": "match all single-digit numbers that are found in between two arabic texts.\n\n(?<![0-9] ?)- will match a dash not preceded by a number.\n\\b\\d(\\s\\d+)*\\b(?=[\\u0600-\\u06FF]) will match sequences of numbers separated by spaces followed by Arabic text.\n(?<=[\\u0600-\\u06FF])\\b\\d(\\s\\d+)*\\b will match sequences of numbers separated by spaces preceded by Arabic text.\n\n\nFor example:\n\"وهب 3 وقال\" should remove the \"3\". But \"لوحه 121 الجرح\" should not remove the 121 since it is not a single digit.",
        "arabic": 1,
        "onSanitize": 1,
        "timestamp": "2023-09-27 16:56:47",
        "last_updated": "2023-09-28 21:23:05"
    },
    {
        "id": 244,
        "name": "removeNonIndexSignatures",
        "pattern": "(?<=[\\u0600-\\u06FF]\\s)(\\d+\\s)+\\d+(?=(\\s[\\u0600-\\u06FF]|$))",
        "replacement": " ",
        "flags": "g",
        "description": "Replaces numbers in a sequence surrounded by Arabic text such as:\nسنه 695 6 واكثر",
        "arabic": 1,
        "onSanitize": 1,
        "timestamp": "2023-09-28 20:57:52",
        "last_updated": "2023-09-28 21:34:07"
    },
    {
        "id": 245,
        "name": "removeNumbersAndDashes",
        "pattern": "[\\d-]",
        "replacement": "",
        "flags": "g",
        "description": "Removes digits and dashes from the text.",
        "arabic": 1,
        "english": 1,
        "timestamp": "2023-09-25 19:08:51",
        "last_updated": "2023-09-27 16:49:57"
    },
    {
        "id": 251,
        "name": "removeSolitaryArabicLetters",
        "pattern": "(^| )[\\u0621-\\u064A]( |$)",
        "replacement": " ",
        "flags": "g",
        "arabic": 1,
        "onSanitize": 1,
        "timestamp": "2023-09-27 18:38:05",
        "last_updated": "2023-09-27 21:36:13"
    },
    {
        "id": 301,
        "name": "cleanSymbolsAndPartReferences",
        "pattern": " *\\(?:\\d+(?:\\/\\d+){0,2}\\)? *| *\\[\\d+(?:\\/\\d+)?\\] *| *«\\d+» *|\\d+\\/\\d+(?:\\/\\d+)?|[،§{}۝؍‎﴿﴾<>;_؟»«:!،؛\\[\\]…ـ¬\\.\\\\\\/\\*\\(\\)\"]",
        "replacement": " ",
        "flags": "g",
        "description": "some example texts that would be affected by the cleanSymbols function:\n\nText with numerical markers in parentheses:\nInput: \"This is a text (1) (2/3)\"\nOutput: \"This is a text\"\n\nText with numerical markers in square brackets:\nInput: \"Another example [1] [1/2]\"\nOutput: \"Another example\"\n\nText with part references:\nInput: \"Part references 1/2 2/3/4\"\nOutput: \"Part references\"\n\nText with various symbols:\nInput: \"Hello، world! {test} <example> …\"\nOutput: \"Hello world test example\"\n\nText with mixed elements:\nInput: \"Mixed (1) [2] «3» 1/2 [1/2] ;.,!\"\nOutput: \"Mixed\"\n\nText with backslashes and forward slashes:\nInput: \"File path is C:\\\\folder\\\\file / Unix path is /usr/bin/\"\nOutput: \"File path is C folder file Unix path is usr bin\"\n\nText with Arabic symbols and characters:\nInput: \"Arabic example: ﴿س﴾ ۝\"\nOutput: \"Arabic example\"",
        "arabic": 1,
        "onSanitize": 1,
        "timestamp": "2023-09-25 19:08:51",
        "last_updated": "2023-09-27 16:49:39"
    },
    {
        "id": 438,
        "name": "cleanMultilines",
        "pattern": "^ +| +$",
        "replacement": "",
        "flags": "gm",
        "description": "remove trailing spaces on multilines\nTrims each line in a paragraph. For example something like\n\" This is the first line  \\n    This is the second line    \"\n would turn into \"This is the first line\\nThis is the second line\".",
        "arabic": 1,
        "english": 1,
        "onBlur": 1,
        "onPaste": 1,
        "onSanitize": 1,
        "timestamp": "2023-09-25 19:08:51",
        "last_updated": "2023-09-27 16:49:12"
    },
    {
        "id": 439,
        "name": "reduceSpaces",
        "pattern": "[ \\t]+",
        "replacement": " ",
        "flags": "g",
        "description": "Replaces multiple spaces or tabs by a single space.\n\nFor example something like \"This is a   text\" would turn into \"This is a text\"",
        "arabic": 1,
        "english": 1,
        "onBlur": 1,
        "onPaste": 1,
        "onSanitize": 1,
        "timestamp": "2023-09-25 19:08:51",
        "last_updated": "2023-09-27 16:48:59"
    },
    {
        "id": 1001,
        "name": "removeSingleDigitReferences",
        "pattern": "\\(\\d{1}\\)|\\[\\d{1}\\]|«\\d»",
        "replacement": "",
        "flags": "g",
        "description": "Removes single digit references like (1), «2», [3].",
        "timestamp": "2023-10-12 07:22:29",
        "last_updated": "2023-10-12 09:27:48"
    },
    {
        "id": 1002,
        "name": "removeAllDigits",
        "pattern": "[0-9]",
        "replacement": "",
        "flags": "g",
        "description": "Removes all numeric digits from texts.",
        "timestamp": "2023-10-12 09:29:23",
        "last_updated": "2023-10-12 09:30:14"
    },
    {
        "id": 1003,
        "name": "removeDeathYear",
        "pattern": "\\[(d)\\.\\s*\\d{1,4}[hH]\\]\\s*|\\((d)\\.\\s*\\d{1,4}[hH]\\)\\s*",
        "replacement": "",
        "flags": "g",
        "description": "Removes text like \"(d. 390H)\" and \"[d. 100h]\"",
        "english": 1,
        "timestamp": "2023-10-12 09:30:50",
        "last_updated": "2023-10-12 10:42:47"
    }
]